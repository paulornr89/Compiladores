PARSER_BEGIN(Karloff)
import java.io.*;

public class Karloff {
    public static void main(String args[]) throws ParseException,IOException {
        Karloff parser = new Karloff(new FileInputStream(args[0]));
        parser.Lugosi();
    }
}

class karloff{
    Main main;
    ArrayList <func> funcs;
}

class Main{
    ArrayList <VarDecl> VarDecl;
    ArrayList <Comando> Comandos;
}

class VarDecl{
    String var;
    Tipo tipo;
}

class Tipo{}

class Int extends Tipo{
    int num;
    Int (int num){
        this.num=num;
    }
}

class Bool extends Tipo{
    String bool;
    Bool (String bool){
        this.bool=bool;
    }
}

class Comando{}

class Atribuicao extends Comando{
    String var;
    Exp exp;
    Atribuicao(String var, Exp exp){
        this.var=var;
        this.exp=exp;
    }
}

class ChamadaFunc extends Comando{
    String func;
    ArrayList <Exp> arg;
    ChamadaFunc(String func, ArrayList <exp> arg){
        this.func=func;
        this.arg=arg;
    }
}

class If extends Comando{
    Exp bool;
    ArrayList <Comando> comandos;
    If(Exp bool,ArrayList <Comando> comandos){
        this.bool=bool;
        this.comandos=comandos;
    }
}

class While extends Comando{
    Exp bool;
    ArrayList <Comando> comandos;
    While(Exp bool, ArrayList <Comando> comandos){
        this.bool=bool;
        this.comandos=comandos;
    }
}

class Repeat extends Comando{
    ArrayList <Comando> comandos;
    Exp bool;
    Repeat(ArrayList <Comando> comandos,Exp bool){
        this.comandos=comandos;
        this.bool=bool;
    }
}

class Return extends Comando{
    Exp exp;
    Return(Exp exp){
    this.exp=exp;
    }
}

class SystemOut extends Comando{
    Exp exp;
    SystemOut(Exp exp){
    this.exp=exp;
    }
}

class Exp{}

class Fator extends Exp{}

class Id extends Fator{
    String var;
    Id(String var){
        this.var=var;
    }
}

class ChamadaFuncFator extends Fator{
    String func;
    ArrayList <Exp> exp;
    ChamadaFuncFator(String func, ArrayList <Exp> arg){
        this.func=func;
        this.arg=arg;
    }
}

class NumLiteral extends Fator{
    String num;
    NumLiteral(String num){
        this.num=num;
    }
}

class BoolTrue extends Fator{
    String bool;
    BoolTrue(String bool){
        this.bool=bool;
    }
}

class BoolFalse extends Fator{
    String bool;
    BoolFalse(String bool){
        this.bool=bool;
    }
}

class Op{
    String simbolo;
    Exp um;
    Exp dois;
    Op(String simbolo,Exp um,Exp dois){
        this.simbolo=simbolo;
        this.um=um;
        this.dois=dois;
    }
}

class Func{
    Tipo tipo;
    String var;
    ArrayList <Argumento> argumentos;
    ArrayList <VarDecl> declaracao;
    ArrayList <Comando> comandos;
    Func(Tipo tipo, String var, Arraylist <Argumento> argumentos, ArrayList<VarDecl> declaracao, ArrayList <Comando> comandos){
        this.tipo=tipo;
        this.var=var;
        this.argumentos=argumentos;
        this.declaracao=declaracao;
        this.comandos=comandos;
    }
}

class Argumento{
    Tipo tipo;
    String var;
    Argumento(Tipo tipo, String var){
        this.tipo=tipo;
        this.var=var;
    }
}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <NEWVAR: "newVar">
| <INT: "int">
| <PVIRGULA: ";">
| <BOOL: "bool">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <PRINT: "System.output">
| <APAREN: "(">
| <FPAREN: ")">
| <IGUAL: "=">
| <VIRGULA: ",">
| <NFUNC: "func">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==")>
|< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")+>
|<NUMLITERAL: (["0"-"9"])+ ("."(["0"-"9"])+)? ("E"(["0"-"9"])+)?>
|<BOOLEANO: ("true")|("false")>
}



ArvoreSintaticaKarloff Karloff () :
{Main main = null; ArrayList<Func> funcs = null;}
{
    main = Main() (funcs = Func())? <EOF>
    {return new ArvoreSintaticaKarloff(main, funcs);}
}
	

Main Main ():
{ArrayList <VarDecl> vardecl; ArrayList <Comando> comandos;}
{
    <VOID> <MAIN> <ACHAVES> vardecl=VarDecl() comandos=SeqComandos() <FCHAVES>
    {return new Main(vardecl,comandos);}
}

ArrayList <VarDecl> VarDecl():
{ArrayList <VarDecl> vardecl= new ArrayList <VarDecl>(); Token identificador=null; Tipo tipo = null;}
{
    (<NEWVAR> tipo=Tipo() identificador=<ID> <PVIRGULA> {vardecl.add(new VarDecl(tipo,identificador.image));})*
    {return vardecl;}
}


Tipo Tipo():
{Token a=null;Token b=null;Tipo tipo=null;}
{
    (a=<INT> {tipo=new Int(a.image);}|b=<BOOL>{tipo=new Bool(b.image);})
    {return tipo;}
}

ArrayList SeqComandos():
{ArrayList <Comando> seqcomandos=new Comando(); Comando comando=null;}
{
    (comando=Comando() {seqcomandos.add(comando);})*
    {return seqcomandos;}
}

void Comando():
{}
{
    <ID> Comando_Token_id()
    |<IF> <APAREN> Exp() <FPAREN> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PVIRGULA>
    |<WHILE> <APAREN> Exp() <FPAREN> <ACHAVES> SeqComandos() <FCHAVES> <PVIRGULA>
    |<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APAREN> Exp() <FPAREN> <PVIRGULA>
    |<RETURN> Exp() <PVIRGULA>
    |<PRINT> <APAREN> Exp() <FPAREN> <PVIRGULA>
}

void Comando_Token_id():
{}
{
    <IGUAL> Exp() <PVIRGULA>|<APAREN> (ListaExp())? <FPAREN> <PVIRGULA>
}

void Exp():
{}
{
    <APAREN> Exp() <OP> Exp() <FPAREN>| Fator()
}

void Fator():
{}
{
    <ID> Fator_Token_id()
    |<NUMLITERAL>
    |<BOOLEANO>
}

void Fator_Token_id():
{}
{
    (<APAREN> (ListaExp())? <FPAREN>)?
}

void ListaExp():
{}
{
    Exp() ListaExp1()
}

void ListaExp1():
{}
{
   (<VIRGULA> Exp() ListaExp1())?
}

void Func():
{}
{
    (<NFUNC> Tipo() <ID> <APAREN> (ListaArg())? <FPAREN> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+
}

void ListaArg():
{}
{
    Tipo() <ID> ListaArg1()
}

void ListaArg1():
{}
{
    (<VIRGULA> <ID> ListaArg1())?
}